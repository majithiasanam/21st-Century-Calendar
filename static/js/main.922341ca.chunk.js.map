{"version":3,"sources":["res/svg/monday.svg","res/svg/tuesday.svg","res/svg/wednesday.svg","res/svg/thursday.svg","res/svg/friday.svg","res/svg/saturday.svg","res/svg/sunday.svg","components/day/day.jsx","components/month/month.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Day","props","className","today","date","data","name","src","mood","alt","monthsOfYear","daysOfWeek","sunday","monday","tuesday","wednesday","thursday","friday","saturday","years","Array","keys","map","year","Month","isToday","currentDate","daysToShow","now","Date","useState","currentMonth","setCurrentMonth","getFullYear","currentYear","setCurrentYear","daysOfCurrentMonth","getDate","firstDayOfCurrentMonth","getDay","i","getMonth","push","key","DropdownButton","id","title","month","Dropdown","Item","active","onSelect","indexOf","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,wPCoB5BC,MAjBf,SAAaC,GACT,OACI,yBAAKC,UAAU,aACVD,EAAME,MACP,yBAAKD,UAAW,sBAAwBD,EAAME,MAAQ,QAAS,KAC3D,yBAAKD,UAAU,cACX,2BAAID,EAAMG,OAEd,yBAAKF,UAAU,mBACX,yBAAKA,UAAU,YAAW,2BAAID,EAAMI,KAAKC,OACzC,yBAAKJ,UAAU,WAAU,yBAAKK,IAAKN,EAAMI,KAAKG,KAAMC,IAAKR,EAAMI,KAAKC,Y,sHCClFI,EAAe,CACnB,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAGIC,EAAa,CACjB,CACEL,KAAM,SACNE,K,OAAMI,GAER,CACEN,KAAM,SACNE,KAAMK,KAER,CACEP,KAAM,UACNE,KAAMM,KAER,CACER,KAAM,YACNE,KAAMO,KAER,CACET,KAAM,WACNE,KAAMQ,KAER,CACEV,KAAM,SACNE,KAAMS,KAER,CACEX,KAAM,WACNE,KAAMU,MAKJC,EAAQ,YAAIC,MAAM,KAAKC,QAAQC,KAAI,SAACC,GAAD,OAAUA,EAAK,OA+DzCC,MA7Df,WA6BI,IA3BA,IAyBIC,EACAC,EA1BAC,EAAa,GACXC,EAAM,IAAIC,KAHH,EAKyBC,mBAAS,GALlC,mBAKRC,EALQ,KAKMC,EALN,OAMuBF,mBAASF,EAAIK,eANpC,mBAMRC,EANQ,KAMKC,EANL,KAQPC,EAAqB,IAAIP,KAAKK,EAAaH,EAAa,EAAG,GAAGM,UAC9DC,EAAyB,IAAIT,KAAKK,EAAaH,EAAc,GAAGQ,SAoB7DC,EAAEF,EAAwBE,EAAEJ,EAAmBE,EAAwBE,IAC5Ed,EAAcc,EAAIF,EAAyB,EAC3Cb,EAAWG,EAAIS,YAAYX,GAAeE,EAAIa,aAAaV,GAAgBH,EAAIK,gBAAgBC,EAC/FP,EAAWe,KAAM,kBAAC,EAAD,CAAKrC,KAAMM,EAAW6B,EAAE,GAAIrC,MAAOsB,EAASrB,KAAMsB,EAAaiB,IAAKH,KAGzF,OACE,yBAAKtC,UAAU,YACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,kBAAiB,yCAChC,kBAAC0C,EAAA,EAAD,CAAgBC,GAAG,iBAAiBC,MAAOpC,EAAaqB,IAEpDrB,EAAaY,KAAI,SAACyB,GAAD,OACf,kBAACC,EAAA,EAASC,KAAV,CAAeC,OAAQxC,EAAaqB,KAAgBgB,EAAOI,SAAU,kBAAMnB,EAAgBtB,EAAa0C,QAAQL,MAAUA,OAIhI,kBAACH,EAAA,EAAD,CAAgBC,GAAG,gBAAgBC,MAAOZ,GAEtCf,EAAMG,KAAI,SAACC,GAAD,OACR,kBAACyB,EAAA,EAASC,KAAV,CAAeC,OAAQhB,IAAcX,EAAM4B,SAAU,kBAAMhB,EAAeZ,KAAQA,QAK1F,yBAAKrB,UAAU,qBACZyB,KC9GI0B,MAJf,WACI,OAAQ,kBAAC,EAAD,OCOQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.922341ca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/monday.6af16566.svg\";","module.exports = __webpack_public_path__ + \"static/media/tuesday.c5117fae.svg\";","module.exports = __webpack_public_path__ + \"static/media/wednesday.686bfb6b.svg\";","module.exports = __webpack_public_path__ + \"static/media/thursday.76a23e16.svg\";","module.exports = __webpack_public_path__ + \"static/media/friday.664aa5d7.svg\";","module.exports = __webpack_public_path__ + \"static/media/saturday.64d0c4b5.svg\";","module.exports = __webpack_public_path__ + \"static/media/sunday.0256b078.svg\";","import React from 'react';\r\nimport './day.css';\r\n\r\nfunction Day(props) {\r\n    return (\r\n        <div className=\"day col-2\">\r\n            {props.today}\r\n            <div className={\"day-container row \" + (props.today ? \"today\": \"\")}>\r\n                <div className=\"col-2 date\">\r\n                    <p>{props.date}</p>\r\n                </div>\r\n                <div className=\"col-10 day-info\">\r\n                    <div className=\"day-name\"><p>{props.data.name}</p></div>\r\n                    <div className=\"day-img\"><img src={props.data.mood} alt={props.data.name} /></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Day;","import React, {useState} from 'react';\r\nimport {DropdownButton, Dropdown} from 'react-bootstrap';\r\n\r\nimport Day from '../day/day.jsx';\r\nimport './month.css'\r\n\r\nimport monday from '../../res/svg/monday.svg';\r\nimport tuesday from '../../res/svg/tuesday.svg';\r\nimport wednesday from '../../res/svg/wednesday.svg';\r\nimport thursday from '../../res/svg/thursday.svg';\r\nimport friday from '../../res/svg/friday.svg';\r\nimport saturday from '../../res/svg/saturday.svg';\r\nimport sunday from '../../res/svg/sunday.svg';\r\n\r\nconst monthsOfYear = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\"\r\n];\r\n\r\nconst daysOfWeek = [\r\n  {\r\n    name: \"Sunday\",\r\n    mood: sunday\r\n  },\r\n  {\r\n    name: \"Monday\",\r\n    mood: monday\r\n  },\r\n  {\r\n    name: \"Tuesday\",\r\n    mood: tuesday\r\n  },  \r\n  {\r\n    name: \"Wednesday\",\r\n    mood: wednesday\r\n  },\r\n  {\r\n    name: \"Thursday\",\r\n    mood: thursday\r\n  },\r\n  {\r\n    name: \"Friday\",\r\n    mood: friday\r\n  },\r\n  {\r\n    name: \"Saturday\",\r\n    mood: saturday\r\n  }\r\n];\r\n\r\n// From 2000 to 2100\r\nconst years = [...Array(100).keys()].map((year) => year+2000);\r\n\r\nfunction Month() {\r\n  \r\n    let daysToShow = [];\r\n    const now = new Date();\r\n\r\n    let [currentMonth, setCurrentMonth] = useState(0);\r\n    let [currentYear, setCurrentYear] = useState(now.getFullYear());\r\n\r\n    const daysOfCurrentMonth = new Date(currentYear, currentMonth+1, 0).getDate();\r\n    const firstDayOfCurrentMonth = new Date(currentYear, currentMonth, 1).getDay();\r\n    \r\n    // Check if current month does not start on a Sunday\r\n    // If so, add dummy tiles from last month\r\n    // if(firstDayOfMonth > 0) {\r\n    //   const daysOfPreviousMonth = (currentMonth===0) ? 31 : (new Date(currentYear, currentMonth-1, 0).getDate());\r\n    //   const dummyDaysArr = [...Array(firstDayOfMonth).keys()];\r\n    //   const numOfDummyDays = dummyDaysArr.length;\r\n    //   for(let index=firstDayOfMonth; index < ; index++) {\r\n    //     daysToShow.push( \r\n    //       <Day data={daysOfWeek[firstDayOfMonth - Number(index)]} \r\n    //             today={false} \r\n    //             date={daysOfPreviousMonth-numOfDummyDays + Number(index) + 1}\r\n    //             key={daysOfWeek[index+1].name} />\r\n    //     );\r\n    //   }\r\n    // }\r\n\r\n    let isToday,\r\n        currentDate;\r\n    for (let i=firstDayOfCurrentMonth; i<daysOfCurrentMonth+firstDayOfCurrentMonth; i++) {\r\n        currentDate = i - firstDayOfCurrentMonth + 1;\r\n        isToday = (now.getDate()===currentDate && now.getMonth()===currentMonth && now.getFullYear()===currentYear);\r\n        daysToShow.push( <Day data={daysOfWeek[i%7]} today={isToday} date={currentDate} key={i} /> );\r\n    }\r\n    \r\n    return (\r\n      <div className=\"calendar\">\r\n        <div className=\"row month-name\">\r\n          <div className=\"calendar-title\"><h2>Calendar</h2></div>\r\n          <DropdownButton id=\"dropdown-month\" title={monthsOfYear[currentMonth]}>\r\n            { \r\n              monthsOfYear.map((month) => \r\n                <Dropdown.Item active={monthsOfYear[currentMonth]===month} onSelect={() => setCurrentMonth(monthsOfYear.indexOf(month))}>{month}</Dropdown.Item>\r\n              )\r\n            }\r\n          </DropdownButton>    \r\n          <DropdownButton id=\"dropdown-year\" title={currentYear}>\r\n            { \r\n              years.map((year) =>\r\n                <Dropdown.Item active={currentYear===year} onSelect={() => setCurrentYear(year)}>{year}</Dropdown.Item>\r\n              )\r\n            }\r\n          </DropdownButton>    \r\n        </div>\r\n        <div className=\"row calendar-days\">\r\n          {daysToShow}\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Month;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Month from './components/month/month.jsx';\r\n\r\nfunction App() {\r\n    return (<Month />);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}